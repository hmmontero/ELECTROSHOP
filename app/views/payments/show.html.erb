<script>
  function loadMercadoPagoScript(callback) {
    const script = document.createElement("script");
    script.src = "https://sdk.mercadopago.com/js/v2";
    script.onload = callback;
    document.head.appendChild(script);
  }

  loadMercadoPagoScript(() => {
    const mp = new MercadoPago('TEST-c14fb359-a855-4bb4-9dc6-a9b1e6136d14', {
      locale: 'es-PE'
    });

    const bricksBuilder = mp.bricks();
    const renderCardPaymentBrick = async (bricksBuilder) => {
      const settings = {
        initialization: {
          amount: 100,
          payer: { email: "" },
        },
        customization: {
          visual: {
            style: {
              theme: 'default',
              customVariables: {}
            }
          },
          paymentMethods: {
            maxInstallments: 1,
          }
        },
        callbacks: {
          onReady: () => console.log("Brick listo"),
          onSubmit: (cardFormData) => {
            return fetch("/process_payment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(cardFormData)
            });
          },
          onError: (error) => console.error("Error en Brick:", error),
        },
      };
      bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
    };

    renderCardPaymentBrick(bricksBuilder);
  });
</script>

<head>
  <script src="https://sdk.mercadopago.com/js/v2"></script>
</head>

<div class="container d-flex justify-content-center align-items-center min-vh-100">
  <div class="p-4 shadow-lg border-0" style="max-width: 400px; width: 100%;">
    <div id="cardPaymentBrick_container"></div>
  </div>
</div>

<script>
  const mp = new MercadoPago('TEST-c14fb359-a855-4bb4-9dc6-a9b1e6136d14', {
    locale: 'es-PE'
  });
  const bricksBuilder = mp.bricks();
  const renderCardPaymentBrick = async (bricksBuilder) => {
    const settings = {
      initialization: {
        amount: 100,
        payer: {
          email: "",
        },
      },
      customization: {
        visual: {
          style: {
            theme: 'default',
            customVariables: {
            }
          }
        },
          paymentMethods: {
            maxInstallments: 1,
          }
      },
      callbacks: {
        onReady: () => {
        },
        onSubmit: (cardFormData) => {
          return new Promise((resolve, reject) => {
            fetch("/process_payment", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(cardFormData)
            })
              .then((response) => {
                resolve();
              })
              .catch((error) => {
                reject();
              })
          });
        },
        onError: (error) => {
        },
      },
    };
    window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
  };
  renderCardPaymentBrick(bricksBuilder);
</script>
